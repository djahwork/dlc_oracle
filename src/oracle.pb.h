// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oracle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oracle_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_oracle_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_oracle_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_oracle_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_oracle_2eproto;
namespace oracle {
class DLCReply;
struct DLCReplyDefaultTypeInternal;
extern DLCReplyDefaultTypeInternal _DLCReply_default_instance_;
class DLCRequest;
struct DLCRequestDefaultTypeInternal;
extern DLCRequestDefaultTypeInternal _DLCRequest_default_instance_;
}  // namespace oracle
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace oracle {

// ===================================================================


// -------------------------------------------------------------------

class DLCRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:oracle.DLCRequest) */ {
 public:
  inline DLCRequest() : DLCRequest(nullptr) {}
  ~DLCRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DLCRequest(::google::protobuf::internal::ConstantInitialized);

  DLCRequest(const DLCRequest& from);
  DLCRequest(DLCRequest&& from) noexcept
    : DLCRequest() {
    *this = ::std::move(from);
  }

  inline DLCRequest& operator=(const DLCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DLCRequest& operator=(DLCRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DLCRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DLCRequest* internal_default_instance() {
    return reinterpret_cast<const DLCRequest*>(
               &_DLCRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DLCRequest& a, DLCRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DLCRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DLCRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DLCRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DLCRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DLCRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DLCRequest& from) {
    DLCRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DLCRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "oracle.DLCRequest";
  }
  protected:
  explicit DLCRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalPubkeyFieldNumber = 1,
    kLocalTxidFieldNumber = 2,
    kLocalFundAddressFieldNumber = 3,
    kLocalChangeAddressFieldNumber = 4,
    kRemotePubkeyFieldNumber = 5,
    kRemoteTxidFieldNumber = 6,
    kRemoteFundAddressFieldNumber = 7,
    kRemoteChangeAddressFieldNumber = 8,
  };
  // string local_pubkey = 1;
  void clear_local_pubkey() ;
  const std::string& local_pubkey() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_local_pubkey(Arg_&& arg, Args_... args);
  std::string* mutable_local_pubkey();
  PROTOBUF_NODISCARD std::string* release_local_pubkey();
  void set_allocated_local_pubkey(std::string* ptr);

  private:
  const std::string& _internal_local_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_pubkey(
      const std::string& value);
  std::string* _internal_mutable_local_pubkey();

  public:
  // string local_txid = 2;
  void clear_local_txid() ;
  const std::string& local_txid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_local_txid(Arg_&& arg, Args_... args);
  std::string* mutable_local_txid();
  PROTOBUF_NODISCARD std::string* release_local_txid();
  void set_allocated_local_txid(std::string* ptr);

  private:
  const std::string& _internal_local_txid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_txid(
      const std::string& value);
  std::string* _internal_mutable_local_txid();

  public:
  // string local_fund_address = 3;
  void clear_local_fund_address() ;
  const std::string& local_fund_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_local_fund_address(Arg_&& arg, Args_... args);
  std::string* mutable_local_fund_address();
  PROTOBUF_NODISCARD std::string* release_local_fund_address();
  void set_allocated_local_fund_address(std::string* ptr);

  private:
  const std::string& _internal_local_fund_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_fund_address(
      const std::string& value);
  std::string* _internal_mutable_local_fund_address();

  public:
  // string local_change_address = 4;
  void clear_local_change_address() ;
  const std::string& local_change_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_local_change_address(Arg_&& arg, Args_... args);
  std::string* mutable_local_change_address();
  PROTOBUF_NODISCARD std::string* release_local_change_address();
  void set_allocated_local_change_address(std::string* ptr);

  private:
  const std::string& _internal_local_change_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_change_address(
      const std::string& value);
  std::string* _internal_mutable_local_change_address();

  public:
  // string remote_pubkey = 5;
  void clear_remote_pubkey() ;
  const std::string& remote_pubkey() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remote_pubkey(Arg_&& arg, Args_... args);
  std::string* mutable_remote_pubkey();
  PROTOBUF_NODISCARD std::string* release_remote_pubkey();
  void set_allocated_remote_pubkey(std::string* ptr);

  private:
  const std::string& _internal_remote_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_pubkey(
      const std::string& value);
  std::string* _internal_mutable_remote_pubkey();

  public:
  // string remote_txid = 6;
  void clear_remote_txid() ;
  const std::string& remote_txid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remote_txid(Arg_&& arg, Args_... args);
  std::string* mutable_remote_txid();
  PROTOBUF_NODISCARD std::string* release_remote_txid();
  void set_allocated_remote_txid(std::string* ptr);

  private:
  const std::string& _internal_remote_txid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_txid(
      const std::string& value);
  std::string* _internal_mutable_remote_txid();

  public:
  // string remote_fund_address = 7;
  void clear_remote_fund_address() ;
  const std::string& remote_fund_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remote_fund_address(Arg_&& arg, Args_... args);
  std::string* mutable_remote_fund_address();
  PROTOBUF_NODISCARD std::string* release_remote_fund_address();
  void set_allocated_remote_fund_address(std::string* ptr);

  private:
  const std::string& _internal_remote_fund_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_fund_address(
      const std::string& value);
  std::string* _internal_mutable_remote_fund_address();

  public:
  // string remote_change_address = 8;
  void clear_remote_change_address() ;
  const std::string& remote_change_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remote_change_address(Arg_&& arg, Args_... args);
  std::string* mutable_remote_change_address();
  PROTOBUF_NODISCARD std::string* release_remote_change_address();
  void set_allocated_remote_change_address(std::string* ptr);

  private:
  const std::string& _internal_remote_change_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_change_address(
      const std::string& value);
  std::string* _internal_mutable_remote_change_address();

  public:
  // @@protoc_insertion_point(class_scope:oracle.DLCRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 0, 158, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr local_pubkey_;
    ::google::protobuf::internal::ArenaStringPtr local_txid_;
    ::google::protobuf::internal::ArenaStringPtr local_fund_address_;
    ::google::protobuf::internal::ArenaStringPtr local_change_address_;
    ::google::protobuf::internal::ArenaStringPtr remote_pubkey_;
    ::google::protobuf::internal::ArenaStringPtr remote_txid_;
    ::google::protobuf::internal::ArenaStringPtr remote_fund_address_;
    ::google::protobuf::internal::ArenaStringPtr remote_change_address_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_oracle_2eproto;
};// -------------------------------------------------------------------

class DLCReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:oracle.DLCReply) */ {
 public:
  inline DLCReply() : DLCReply(nullptr) {}
  ~DLCReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DLCReply(::google::protobuf::internal::ConstantInitialized);

  DLCReply(const DLCReply& from);
  DLCReply(DLCReply&& from) noexcept
    : DLCReply() {
    *this = ::std::move(from);
  }

  inline DLCReply& operator=(const DLCReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DLCReply& operator=(DLCReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DLCReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DLCReply* internal_default_instance() {
    return reinterpret_cast<const DLCReply*>(
               &_DLCReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DLCReply& a, DLCReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DLCReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DLCReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DLCReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DLCReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DLCReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DLCReply& from) {
    DLCReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DLCReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "oracle.DLCReply";
  }
  protected:
  explicit DLCReply(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCetTxsFieldNumber = 1,
    kRValuesFieldNumber = 4,
    kOutcomeMessagesFieldNumber = 5,
    kFundTxFieldNumber = 2,
    kRefundTxFieldNumber = 3,
  };
  // repeated string cet_txs = 1;
  int cet_txs_size() const;
  private:
  int _internal_cet_txs_size() const;

  public:
  void clear_cet_txs() ;
  const std::string& cet_txs(int index) const;
  std::string* mutable_cet_txs(int index);
  void set_cet_txs(int index, const std::string& value);
  void set_cet_txs(int index, std::string&& value);
  void set_cet_txs(int index, const char* value);
  void set_cet_txs(int index, const char* value, std::size_t size);
  void set_cet_txs(int index, absl::string_view value);
  std::string* add_cet_txs();
  void add_cet_txs(const std::string& value);
  void add_cet_txs(std::string&& value);
  void add_cet_txs(const char* value);
  void add_cet_txs(const char* value, std::size_t size);
  void add_cet_txs(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& cet_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_cet_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_cet_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_cet_txs();

  public:
  // repeated string r_values = 4;
  int r_values_size() const;
  private:
  int _internal_r_values_size() const;

  public:
  void clear_r_values() ;
  const std::string& r_values(int index) const;
  std::string* mutable_r_values(int index);
  void set_r_values(int index, const std::string& value);
  void set_r_values(int index, std::string&& value);
  void set_r_values(int index, const char* value);
  void set_r_values(int index, const char* value, std::size_t size);
  void set_r_values(int index, absl::string_view value);
  std::string* add_r_values();
  void add_r_values(const std::string& value);
  void add_r_values(std::string&& value);
  void add_r_values(const char* value);
  void add_r_values(const char* value, std::size_t size);
  void add_r_values(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& r_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_r_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_r_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_r_values();

  public:
  // repeated string outcome_messages = 5;
  int outcome_messages_size() const;
  private:
  int _internal_outcome_messages_size() const;

  public:
  void clear_outcome_messages() ;
  const std::string& outcome_messages(int index) const;
  std::string* mutable_outcome_messages(int index);
  void set_outcome_messages(int index, const std::string& value);
  void set_outcome_messages(int index, std::string&& value);
  void set_outcome_messages(int index, const char* value);
  void set_outcome_messages(int index, const char* value, std::size_t size);
  void set_outcome_messages(int index, absl::string_view value);
  std::string* add_outcome_messages();
  void add_outcome_messages(const std::string& value);
  void add_outcome_messages(std::string&& value);
  void add_outcome_messages(const char* value);
  void add_outcome_messages(const char* value, std::size_t size);
  void add_outcome_messages(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& outcome_messages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_outcome_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_outcome_messages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_outcome_messages();

  public:
  // string fund_tx = 2;
  void clear_fund_tx() ;
  const std::string& fund_tx() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fund_tx(Arg_&& arg, Args_... args);
  std::string* mutable_fund_tx();
  PROTOBUF_NODISCARD std::string* release_fund_tx();
  void set_allocated_fund_tx(std::string* ptr);

  private:
  const std::string& _internal_fund_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_tx(
      const std::string& value);
  std::string* _internal_mutable_fund_tx();

  public:
  // string refund_tx = 3;
  void clear_refund_tx() ;
  const std::string& refund_tx() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_refund_tx(Arg_&& arg, Args_... args);
  std::string* mutable_refund_tx();
  PROTOBUF_NODISCARD std::string* release_refund_tx();
  void set_allocated_refund_tx(std::string* ptr);

  private:
  const std::string& _internal_refund_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refund_tx(
      const std::string& value);
  std::string* _internal_mutable_refund_tx();

  public:
  // @@protoc_insertion_point(class_scope:oracle.DLCReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 71, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> cet_txs_;
    ::google::protobuf::RepeatedPtrField<std::string> r_values_;
    ::google::protobuf::RepeatedPtrField<std::string> outcome_messages_;
    ::google::protobuf::internal::ArenaStringPtr fund_tx_;
    ::google::protobuf::internal::ArenaStringPtr refund_tx_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_oracle_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DLCRequest

// string local_pubkey = 1;
inline void DLCRequest::clear_local_pubkey() {
  _impl_.local_pubkey_.ClearToEmpty();
}
inline const std::string& DLCRequest::local_pubkey() const {
  // @@protoc_insertion_point(field_get:oracle.DLCRequest.local_pubkey)
  return _internal_local_pubkey();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DLCRequest::set_local_pubkey(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_pubkey_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oracle.DLCRequest.local_pubkey)
}
inline std::string* DLCRequest::mutable_local_pubkey() {
  std::string* _s = _internal_mutable_local_pubkey();
  // @@protoc_insertion_point(field_mutable:oracle.DLCRequest.local_pubkey)
  return _s;
}
inline const std::string& DLCRequest::_internal_local_pubkey() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_pubkey_.Get();
}
inline void DLCRequest::_internal_set_local_pubkey(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_pubkey_.Set(value, GetArenaForAllocation());
}
inline std::string* DLCRequest::_internal_mutable_local_pubkey() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.local_pubkey_.Mutable( GetArenaForAllocation());
}
inline std::string* DLCRequest::release_local_pubkey() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:oracle.DLCRequest.local_pubkey)
  return _impl_.local_pubkey_.Release();
}
inline void DLCRequest::set_allocated_local_pubkey(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_pubkey_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.local_pubkey_.IsDefault()) {
          _impl_.local_pubkey_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oracle.DLCRequest.local_pubkey)
}

// string local_txid = 2;
inline void DLCRequest::clear_local_txid() {
  _impl_.local_txid_.ClearToEmpty();
}
inline const std::string& DLCRequest::local_txid() const {
  // @@protoc_insertion_point(field_get:oracle.DLCRequest.local_txid)
  return _internal_local_txid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DLCRequest::set_local_txid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_txid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oracle.DLCRequest.local_txid)
}
inline std::string* DLCRequest::mutable_local_txid() {
  std::string* _s = _internal_mutable_local_txid();
  // @@protoc_insertion_point(field_mutable:oracle.DLCRequest.local_txid)
  return _s;
}
inline const std::string& DLCRequest::_internal_local_txid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_txid_.Get();
}
inline void DLCRequest::_internal_set_local_txid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_txid_.Set(value, GetArenaForAllocation());
}
inline std::string* DLCRequest::_internal_mutable_local_txid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.local_txid_.Mutable( GetArenaForAllocation());
}
inline std::string* DLCRequest::release_local_txid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:oracle.DLCRequest.local_txid)
  return _impl_.local_txid_.Release();
}
inline void DLCRequest::set_allocated_local_txid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_txid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.local_txid_.IsDefault()) {
          _impl_.local_txid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oracle.DLCRequest.local_txid)
}

// string local_fund_address = 3;
inline void DLCRequest::clear_local_fund_address() {
  _impl_.local_fund_address_.ClearToEmpty();
}
inline const std::string& DLCRequest::local_fund_address() const {
  // @@protoc_insertion_point(field_get:oracle.DLCRequest.local_fund_address)
  return _internal_local_fund_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DLCRequest::set_local_fund_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_fund_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oracle.DLCRequest.local_fund_address)
}
inline std::string* DLCRequest::mutable_local_fund_address() {
  std::string* _s = _internal_mutable_local_fund_address();
  // @@protoc_insertion_point(field_mutable:oracle.DLCRequest.local_fund_address)
  return _s;
}
inline const std::string& DLCRequest::_internal_local_fund_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_fund_address_.Get();
}
inline void DLCRequest::_internal_set_local_fund_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_fund_address_.Set(value, GetArenaForAllocation());
}
inline std::string* DLCRequest::_internal_mutable_local_fund_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.local_fund_address_.Mutable( GetArenaForAllocation());
}
inline std::string* DLCRequest::release_local_fund_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:oracle.DLCRequest.local_fund_address)
  return _impl_.local_fund_address_.Release();
}
inline void DLCRequest::set_allocated_local_fund_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_fund_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.local_fund_address_.IsDefault()) {
          _impl_.local_fund_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oracle.DLCRequest.local_fund_address)
}

// string local_change_address = 4;
inline void DLCRequest::clear_local_change_address() {
  _impl_.local_change_address_.ClearToEmpty();
}
inline const std::string& DLCRequest::local_change_address() const {
  // @@protoc_insertion_point(field_get:oracle.DLCRequest.local_change_address)
  return _internal_local_change_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DLCRequest::set_local_change_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_change_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oracle.DLCRequest.local_change_address)
}
inline std::string* DLCRequest::mutable_local_change_address() {
  std::string* _s = _internal_mutable_local_change_address();
  // @@protoc_insertion_point(field_mutable:oracle.DLCRequest.local_change_address)
  return _s;
}
inline const std::string& DLCRequest::_internal_local_change_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_change_address_.Get();
}
inline void DLCRequest::_internal_set_local_change_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_change_address_.Set(value, GetArenaForAllocation());
}
inline std::string* DLCRequest::_internal_mutable_local_change_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.local_change_address_.Mutable( GetArenaForAllocation());
}
inline std::string* DLCRequest::release_local_change_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:oracle.DLCRequest.local_change_address)
  return _impl_.local_change_address_.Release();
}
inline void DLCRequest::set_allocated_local_change_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_change_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.local_change_address_.IsDefault()) {
          _impl_.local_change_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oracle.DLCRequest.local_change_address)
}

// string remote_pubkey = 5;
inline void DLCRequest::clear_remote_pubkey() {
  _impl_.remote_pubkey_.ClearToEmpty();
}
inline const std::string& DLCRequest::remote_pubkey() const {
  // @@protoc_insertion_point(field_get:oracle.DLCRequest.remote_pubkey)
  return _internal_remote_pubkey();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DLCRequest::set_remote_pubkey(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_pubkey_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oracle.DLCRequest.remote_pubkey)
}
inline std::string* DLCRequest::mutable_remote_pubkey() {
  std::string* _s = _internal_mutable_remote_pubkey();
  // @@protoc_insertion_point(field_mutable:oracle.DLCRequest.remote_pubkey)
  return _s;
}
inline const std::string& DLCRequest::_internal_remote_pubkey() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_pubkey_.Get();
}
inline void DLCRequest::_internal_set_remote_pubkey(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_pubkey_.Set(value, GetArenaForAllocation());
}
inline std::string* DLCRequest::_internal_mutable_remote_pubkey() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.remote_pubkey_.Mutable( GetArenaForAllocation());
}
inline std::string* DLCRequest::release_remote_pubkey() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:oracle.DLCRequest.remote_pubkey)
  return _impl_.remote_pubkey_.Release();
}
inline void DLCRequest::set_allocated_remote_pubkey(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_pubkey_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remote_pubkey_.IsDefault()) {
          _impl_.remote_pubkey_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oracle.DLCRequest.remote_pubkey)
}

// string remote_txid = 6;
inline void DLCRequest::clear_remote_txid() {
  _impl_.remote_txid_.ClearToEmpty();
}
inline const std::string& DLCRequest::remote_txid() const {
  // @@protoc_insertion_point(field_get:oracle.DLCRequest.remote_txid)
  return _internal_remote_txid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DLCRequest::set_remote_txid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_txid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oracle.DLCRequest.remote_txid)
}
inline std::string* DLCRequest::mutable_remote_txid() {
  std::string* _s = _internal_mutable_remote_txid();
  // @@protoc_insertion_point(field_mutable:oracle.DLCRequest.remote_txid)
  return _s;
}
inline const std::string& DLCRequest::_internal_remote_txid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_txid_.Get();
}
inline void DLCRequest::_internal_set_remote_txid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_txid_.Set(value, GetArenaForAllocation());
}
inline std::string* DLCRequest::_internal_mutable_remote_txid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.remote_txid_.Mutable( GetArenaForAllocation());
}
inline std::string* DLCRequest::release_remote_txid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:oracle.DLCRequest.remote_txid)
  return _impl_.remote_txid_.Release();
}
inline void DLCRequest::set_allocated_remote_txid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_txid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remote_txid_.IsDefault()) {
          _impl_.remote_txid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oracle.DLCRequest.remote_txid)
}

// string remote_fund_address = 7;
inline void DLCRequest::clear_remote_fund_address() {
  _impl_.remote_fund_address_.ClearToEmpty();
}
inline const std::string& DLCRequest::remote_fund_address() const {
  // @@protoc_insertion_point(field_get:oracle.DLCRequest.remote_fund_address)
  return _internal_remote_fund_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DLCRequest::set_remote_fund_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_fund_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oracle.DLCRequest.remote_fund_address)
}
inline std::string* DLCRequest::mutable_remote_fund_address() {
  std::string* _s = _internal_mutable_remote_fund_address();
  // @@protoc_insertion_point(field_mutable:oracle.DLCRequest.remote_fund_address)
  return _s;
}
inline const std::string& DLCRequest::_internal_remote_fund_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_fund_address_.Get();
}
inline void DLCRequest::_internal_set_remote_fund_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_fund_address_.Set(value, GetArenaForAllocation());
}
inline std::string* DLCRequest::_internal_mutable_remote_fund_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.remote_fund_address_.Mutable( GetArenaForAllocation());
}
inline std::string* DLCRequest::release_remote_fund_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:oracle.DLCRequest.remote_fund_address)
  return _impl_.remote_fund_address_.Release();
}
inline void DLCRequest::set_allocated_remote_fund_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_fund_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remote_fund_address_.IsDefault()) {
          _impl_.remote_fund_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oracle.DLCRequest.remote_fund_address)
}

// string remote_change_address = 8;
inline void DLCRequest::clear_remote_change_address() {
  _impl_.remote_change_address_.ClearToEmpty();
}
inline const std::string& DLCRequest::remote_change_address() const {
  // @@protoc_insertion_point(field_get:oracle.DLCRequest.remote_change_address)
  return _internal_remote_change_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DLCRequest::set_remote_change_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_change_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oracle.DLCRequest.remote_change_address)
}
inline std::string* DLCRequest::mutable_remote_change_address() {
  std::string* _s = _internal_mutable_remote_change_address();
  // @@protoc_insertion_point(field_mutable:oracle.DLCRequest.remote_change_address)
  return _s;
}
inline const std::string& DLCRequest::_internal_remote_change_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_change_address_.Get();
}
inline void DLCRequest::_internal_set_remote_change_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_change_address_.Set(value, GetArenaForAllocation());
}
inline std::string* DLCRequest::_internal_mutable_remote_change_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.remote_change_address_.Mutable( GetArenaForAllocation());
}
inline std::string* DLCRequest::release_remote_change_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:oracle.DLCRequest.remote_change_address)
  return _impl_.remote_change_address_.Release();
}
inline void DLCRequest::set_allocated_remote_change_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_change_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remote_change_address_.IsDefault()) {
          _impl_.remote_change_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oracle.DLCRequest.remote_change_address)
}

// -------------------------------------------------------------------

// DLCReply

// repeated string cet_txs = 1;
inline int DLCReply::_internal_cet_txs_size() const {
  return _internal_cet_txs().size();
}
inline int DLCReply::cet_txs_size() const {
  return _internal_cet_txs_size();
}
inline void DLCReply::clear_cet_txs() {
  _internal_mutable_cet_txs()->Clear();
}
inline std::string* DLCReply::add_cet_txs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_cet_txs()->Add();
  // @@protoc_insertion_point(field_add_mutable:oracle.DLCReply.cet_txs)
  return _s;
}
inline const std::string& DLCReply::cet_txs(int index) const {
  // @@protoc_insertion_point(field_get:oracle.DLCReply.cet_txs)
  return _internal_cet_txs().Get(index);
}
inline std::string* DLCReply::mutable_cet_txs(int index) {
  // @@protoc_insertion_point(field_mutable:oracle.DLCReply.cet_txs)
  return _internal_mutable_cet_txs()->Mutable(index);
}
inline void DLCReply::set_cet_txs(int index, const std::string& value) {
  _internal_mutable_cet_txs()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:oracle.DLCReply.cet_txs)
}
inline void DLCReply::set_cet_txs(int index, std::string&& value) {
  _internal_mutable_cet_txs()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:oracle.DLCReply.cet_txs)
}
inline void DLCReply::set_cet_txs(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_cet_txs()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oracle.DLCReply.cet_txs)
}
inline void DLCReply::set_cet_txs(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_cet_txs()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oracle.DLCReply.cet_txs)
}
inline void DLCReply::set_cet_txs(int index, absl::string_view value) {
  _internal_mutable_cet_txs()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:oracle.DLCReply.cet_txs)
}
inline void DLCReply::add_cet_txs(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cet_txs()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:oracle.DLCReply.cet_txs)
}
inline void DLCReply::add_cet_txs(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cet_txs()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:oracle.DLCReply.cet_txs)
}
inline void DLCReply::add_cet_txs(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cet_txs()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oracle.DLCReply.cet_txs)
}
inline void DLCReply::add_cet_txs(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cet_txs()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oracle.DLCReply.cet_txs)
}
inline void DLCReply::add_cet_txs(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cet_txs()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:oracle.DLCReply.cet_txs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DLCReply::cet_txs() const {
  // @@protoc_insertion_point(field_list:oracle.DLCReply.cet_txs)
  return _internal_cet_txs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* DLCReply::mutable_cet_txs() {
  // @@protoc_insertion_point(field_mutable_list:oracle.DLCReply.cet_txs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_cet_txs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DLCReply::_internal_cet_txs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cet_txs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DLCReply::_internal_mutable_cet_txs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.cet_txs_;
}

// string fund_tx = 2;
inline void DLCReply::clear_fund_tx() {
  _impl_.fund_tx_.ClearToEmpty();
}
inline const std::string& DLCReply::fund_tx() const {
  // @@protoc_insertion_point(field_get:oracle.DLCReply.fund_tx)
  return _internal_fund_tx();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DLCReply::set_fund_tx(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fund_tx_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oracle.DLCReply.fund_tx)
}
inline std::string* DLCReply::mutable_fund_tx() {
  std::string* _s = _internal_mutable_fund_tx();
  // @@protoc_insertion_point(field_mutable:oracle.DLCReply.fund_tx)
  return _s;
}
inline const std::string& DLCReply::_internal_fund_tx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fund_tx_.Get();
}
inline void DLCReply::_internal_set_fund_tx(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fund_tx_.Set(value, GetArenaForAllocation());
}
inline std::string* DLCReply::_internal_mutable_fund_tx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.fund_tx_.Mutable( GetArenaForAllocation());
}
inline std::string* DLCReply::release_fund_tx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:oracle.DLCReply.fund_tx)
  return _impl_.fund_tx_.Release();
}
inline void DLCReply::set_allocated_fund_tx(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fund_tx_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fund_tx_.IsDefault()) {
          _impl_.fund_tx_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oracle.DLCReply.fund_tx)
}

// string refund_tx = 3;
inline void DLCReply::clear_refund_tx() {
  _impl_.refund_tx_.ClearToEmpty();
}
inline const std::string& DLCReply::refund_tx() const {
  // @@protoc_insertion_point(field_get:oracle.DLCReply.refund_tx)
  return _internal_refund_tx();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DLCReply::set_refund_tx(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.refund_tx_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oracle.DLCReply.refund_tx)
}
inline std::string* DLCReply::mutable_refund_tx() {
  std::string* _s = _internal_mutable_refund_tx();
  // @@protoc_insertion_point(field_mutable:oracle.DLCReply.refund_tx)
  return _s;
}
inline const std::string& DLCReply::_internal_refund_tx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.refund_tx_.Get();
}
inline void DLCReply::_internal_set_refund_tx(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.refund_tx_.Set(value, GetArenaForAllocation());
}
inline std::string* DLCReply::_internal_mutable_refund_tx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.refund_tx_.Mutable( GetArenaForAllocation());
}
inline std::string* DLCReply::release_refund_tx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:oracle.DLCReply.refund_tx)
  return _impl_.refund_tx_.Release();
}
inline void DLCReply::set_allocated_refund_tx(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.refund_tx_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.refund_tx_.IsDefault()) {
          _impl_.refund_tx_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:oracle.DLCReply.refund_tx)
}

// repeated string r_values = 4;
inline int DLCReply::_internal_r_values_size() const {
  return _internal_r_values().size();
}
inline int DLCReply::r_values_size() const {
  return _internal_r_values_size();
}
inline void DLCReply::clear_r_values() {
  _internal_mutable_r_values()->Clear();
}
inline std::string* DLCReply::add_r_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_r_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:oracle.DLCReply.r_values)
  return _s;
}
inline const std::string& DLCReply::r_values(int index) const {
  // @@protoc_insertion_point(field_get:oracle.DLCReply.r_values)
  return _internal_r_values().Get(index);
}
inline std::string* DLCReply::mutable_r_values(int index) {
  // @@protoc_insertion_point(field_mutable:oracle.DLCReply.r_values)
  return _internal_mutable_r_values()->Mutable(index);
}
inline void DLCReply::set_r_values(int index, const std::string& value) {
  _internal_mutable_r_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:oracle.DLCReply.r_values)
}
inline void DLCReply::set_r_values(int index, std::string&& value) {
  _internal_mutable_r_values()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:oracle.DLCReply.r_values)
}
inline void DLCReply::set_r_values(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_r_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oracle.DLCReply.r_values)
}
inline void DLCReply::set_r_values(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_r_values()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oracle.DLCReply.r_values)
}
inline void DLCReply::set_r_values(int index, absl::string_view value) {
  _internal_mutable_r_values()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:oracle.DLCReply.r_values)
}
inline void DLCReply::add_r_values(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_r_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:oracle.DLCReply.r_values)
}
inline void DLCReply::add_r_values(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_r_values()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:oracle.DLCReply.r_values)
}
inline void DLCReply::add_r_values(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_r_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oracle.DLCReply.r_values)
}
inline void DLCReply::add_r_values(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_r_values()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oracle.DLCReply.r_values)
}
inline void DLCReply::add_r_values(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_r_values()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:oracle.DLCReply.r_values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DLCReply::r_values() const {
  // @@protoc_insertion_point(field_list:oracle.DLCReply.r_values)
  return _internal_r_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* DLCReply::mutable_r_values() {
  // @@protoc_insertion_point(field_mutable_list:oracle.DLCReply.r_values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_r_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DLCReply::_internal_r_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.r_values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DLCReply::_internal_mutable_r_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.r_values_;
}

// repeated string outcome_messages = 5;
inline int DLCReply::_internal_outcome_messages_size() const {
  return _internal_outcome_messages().size();
}
inline int DLCReply::outcome_messages_size() const {
  return _internal_outcome_messages_size();
}
inline void DLCReply::clear_outcome_messages() {
  _internal_mutable_outcome_messages()->Clear();
}
inline std::string* DLCReply::add_outcome_messages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_outcome_messages()->Add();
  // @@protoc_insertion_point(field_add_mutable:oracle.DLCReply.outcome_messages)
  return _s;
}
inline const std::string& DLCReply::outcome_messages(int index) const {
  // @@protoc_insertion_point(field_get:oracle.DLCReply.outcome_messages)
  return _internal_outcome_messages().Get(index);
}
inline std::string* DLCReply::mutable_outcome_messages(int index) {
  // @@protoc_insertion_point(field_mutable:oracle.DLCReply.outcome_messages)
  return _internal_mutable_outcome_messages()->Mutable(index);
}
inline void DLCReply::set_outcome_messages(int index, const std::string& value) {
  _internal_mutable_outcome_messages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:oracle.DLCReply.outcome_messages)
}
inline void DLCReply::set_outcome_messages(int index, std::string&& value) {
  _internal_mutable_outcome_messages()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:oracle.DLCReply.outcome_messages)
}
inline void DLCReply::set_outcome_messages(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_outcome_messages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oracle.DLCReply.outcome_messages)
}
inline void DLCReply::set_outcome_messages(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_outcome_messages()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oracle.DLCReply.outcome_messages)
}
inline void DLCReply::set_outcome_messages(int index, absl::string_view value) {
  _internal_mutable_outcome_messages()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:oracle.DLCReply.outcome_messages)
}
inline void DLCReply::add_outcome_messages(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_outcome_messages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:oracle.DLCReply.outcome_messages)
}
inline void DLCReply::add_outcome_messages(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_outcome_messages()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:oracle.DLCReply.outcome_messages)
}
inline void DLCReply::add_outcome_messages(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_outcome_messages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oracle.DLCReply.outcome_messages)
}
inline void DLCReply::add_outcome_messages(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_outcome_messages()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oracle.DLCReply.outcome_messages)
}
inline void DLCReply::add_outcome_messages(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_outcome_messages()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:oracle.DLCReply.outcome_messages)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DLCReply::outcome_messages() const {
  // @@protoc_insertion_point(field_list:oracle.DLCReply.outcome_messages)
  return _internal_outcome_messages();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* DLCReply::mutable_outcome_messages() {
  // @@protoc_insertion_point(field_mutable_list:oracle.DLCReply.outcome_messages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_outcome_messages();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DLCReply::_internal_outcome_messages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outcome_messages_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DLCReply::_internal_mutable_outcome_messages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.outcome_messages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace oracle


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_oracle_2eproto_2epb_2eh
