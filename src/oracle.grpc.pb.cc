// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: oracle.proto

#include "oracle.pb.h"
#include "oracle.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace oracle {

static const char* DLC_method_names[] = {
  "/oracle.DLC/CreateDLC",
};

std::unique_ptr< DLC::Stub> DLC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DLC::Stub> stub(new DLC::Stub(channel, options));
  return stub;
}

DLC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateDLC_(DLC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DLC::Stub::CreateDLC(::grpc::ClientContext* context, const ::oracle::DLCRequest& request, ::oracle::DLCReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::oracle::DLCRequest, ::oracle::DLCReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDLC_, context, request, response);
}

void DLC::Stub::async::CreateDLC(::grpc::ClientContext* context, const ::oracle::DLCRequest* request, ::oracle::DLCReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::oracle::DLCRequest, ::oracle::DLCReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDLC_, context, request, response, std::move(f));
}

void DLC::Stub::async::CreateDLC(::grpc::ClientContext* context, const ::oracle::DLCRequest* request, ::oracle::DLCReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDLC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::oracle::DLCReply>* DLC::Stub::PrepareAsyncCreateDLCRaw(::grpc::ClientContext* context, const ::oracle::DLCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::oracle::DLCReply, ::oracle::DLCRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDLC_, context, request);
}

::grpc::ClientAsyncResponseReader< ::oracle::DLCReply>* DLC::Stub::AsyncCreateDLCRaw(::grpc::ClientContext* context, const ::oracle::DLCRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDLCRaw(context, request, cq);
  result->StartCall();
  return result;
}

DLC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DLC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DLC::Service, ::oracle::DLCRequest, ::oracle::DLCReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DLC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::oracle::DLCRequest* req,
             ::oracle::DLCReply* resp) {
               return service->CreateDLC(ctx, req, resp);
             }, this)));
}

DLC::Service::~Service() {
}

::grpc::Status DLC::Service::CreateDLC(::grpc::ServerContext* context, const ::oracle::DLCRequest* request, ::oracle::DLCReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace oracle

